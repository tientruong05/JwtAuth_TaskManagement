package com.TaskManagement.service.impl;

import com.TaskManagement.dto.JwtAuthenticationResponse;
import com.TaskManagement.dto.SignInRequest;
import com.TaskManagement.dto.SignUpRequest;
import com.TaskManagement.entity.User;
import com.TaskManagement.repository.UserRepository;
import com.TaskManagement.service.AuthService;
import com.TaskManagement.service.JwtService;
import lombok.RequiredArgsConstructor;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

/**
 * Implementation of {@link AuthService} that handles the business logic for user authentication.
 *
 * This class is responsible for registering new users and processing the sign-in flow,
 * including credential validation and JSON Web Token (JWT) generation.
 */
@Service
@RequiredArgsConstructor
public class AuthServiceImpl implements AuthService {

    private final UserRepository userRepository;
    private final PasswordEncoder passwordEncoder;
    private final AuthenticationManager authenticationManager;
    private final JwtService jwtService;

    /**
     * {@inheritDoc}
     *
     * Implements the logic for registering a new user. This method checks if the email and username
     * are already in use before creating a new {@link User} entity. The user's password
     * will be encoded before being saved to the database.
     *
     * @param signUpRequest The request object containing registration details.
     * @return The saved {@link User} entity.
     * @throws RuntimeException if the email or username is already in use.
     */
    @Override
    public User signup(SignUpRequest signUpRequest) {
        // Check if email is already in use
        if (userRepository.existsByEmail(signUpRequest.getEmail())) {
            throw new RuntimeException("Email already in use!");
        }

        // Check if username is already in use
        if (userRepository.existsByUsername(signUpRequest.getUsername())) {
            throw new RuntimeException("Username already in use!");
        }

        User user = User.builder()
                .username(signUpRequest.getUsername())
                .email(signUpRequest.getEmail())
                .password(passwordEncoder.encode(signUpRequest.getPassword())) // Encode the password
                .build();

        return userRepository.save(user);
    }

    /**
     * {@inheritDoc}
     *
     * Implements the user sign-in logic. This method uses Spring Security's {@link AuthenticationManager}
     * to authenticate the credentials. If authentication is successful, a JWT
     * is generated by {@link JwtService} and returned to the user.
     *
     * @param signInRequest The request object containing login credentials.
     * @return A {@link JwtAuthenticationResponse} object containing the access token.
     * @throws org.springframework.security.core.AuthenticationException if the credentials are invalid.
     * @throws RuntimeException if the user is not found in the database after successful authentication.
     */
    @Override
    public JwtAuthenticationResponse signin(SignInRequest signInRequest) {
        // Xác thực người dùng bằng AuthenticationManager
        Authentication authentication = authenticationManager.authenticate(
                new UsernamePasswordAuthenticationToken(
                        signInRequest.getUsername(),
                        signInRequest.getPassword()
                )
        );

        // Nếu không có ngoại lệ nào được ném ra, quá trình xác thực thành công

        // Tìm người dùng trong cơ sở dữ liệu
        User user = userRepository.findByUsername(signInRequest.getUsername())
                .orElseThrow(() -> new RuntimeException("Username not found!"));

        // Tạo JWT
        String jwt = jwtService.generateToken(user);

        // Trả về response chứa token
        return JwtAuthenticationResponse.builder()
                .token(jwt)
                .build();
    }
}
